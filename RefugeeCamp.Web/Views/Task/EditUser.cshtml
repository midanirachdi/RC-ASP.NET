@model RefugeeCamp.Domain.Models.task

@{
    ViewBag.Title = "EditUser";

}

<div class="row page-titles">
    <div class="col-md-5 align-self-center">
        <h3 class="text-themecolor">Task Editing</h3>
    </div>
    <div class="col-md-7 align-self-center">

    </div>

</div>

<div class="container-fluid">
    <div class="col-12">
        
        <div class="card">
            <div class="card-body">
                @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "EditTaskForm" }))
                {
                    @Html.AntiForgeryToken()
    
                    <div class="form-horizontal">
                     
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.id)
        

                        <div class="form-group">
                            @Html.LabelFor(model => model.name, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.name, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.name, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.description, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.description, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.description, "", new { @class = "text-danger" })
                            </div>
                        </div>
        
                        <div class="form-group">
                            @Html.LabelFor(model => model.progress, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10" style="display: flex;align-items: center">
                                <div class="col-md-5" style="padding: 0">
                                    @Html.EditorFor(model => model.progress, new {htmlAttributes = new {@class = "form-control"}})
                                </div>
                                <div class="col-md-4">   
                                    <div id="progressb"></div></div>

                            </div>
                        </div>
        
                        <div class="form-group">
                            <div class="d-flex flex-row justify-content-between">
                                <div class="col-md-6">
                                    <div class="row">
                                        <button type="submit" value="Save" class="btn btn-outline-info btn-rounded">

                                            Save
                                        </button>
                                        
                                        <div style="margin: 5px;margin-left: 85px">
                                            @Html.ActionLink("Back to List", "IndexUser")
                                        </div>

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }

             
            </div>
        </div>
    </div>
</div>
@{

    <div hidden id="uidM">@ViewBag.Mycookie</div>

}
@section scripts
{
    <script type="text/javascript">
        $("#progressb").css('background', 'linear-gradient(90deg, #0d98d8 		                                                   ' + $("#progress").val() + '%, #cccccc 0%)');
        $("#progressb").slider({
            value: $("#progress").val(),
            min: 0,
            max: 100,
            slide:function(event, ui) {
                $("#progress")
                    .text(ui.value)
                    .val(ui.value);
                $("#progressb").css('background', 'linear-gradient(90deg, #0d98d8 		                                                   ' + ui.value + '%, #cccccc 0%)');
            }
        });

        $(function () {
            //first letter miniscule
            var proxy = $.connection.notificationHub;
            
            $("#EditTaskForm").submit(function (event) {
                var form = this;

                proxy.server.sendNotifications($("#uidM").text(), "La tache " + $("#name").val() + " a été modifiée avec succès");
                event.preventDefault();

                setTimeout(function () {
                    form.submit();
                }, 1800);
            });
            $.connection.hub.start();

        });

    </script>
}
